Database Testing:
-----------------
Will test the data is inserted/updated/deleted or not.
SQL -> Structured Query Language
*DDL(Data Defnition Language) -> create, alter, drop
*DML(Data Manipulation Language) -> select, insert, update, delete
*TCL(Transaction Control Language) -> commit, rollback
*DCL(Data Control Language) -> grant, revoke

As a functional tester we require insert, update, delete, select

JDBC(Java Database Connectivity):
---------------------------------
Download data base drivers and associate to our project

Steps to connect db and execute queries through java:
------------------------------------------------------
1.Establish a connection
2.Create a statement
3.Execute statement
4.close connection

*************************
-----* Sql for testers *----
Database :
----------
A database is organized and systematic collection of data that is stored and accesses in/from a system.

DBMS:
-----
Is a software system that is used to maintain and access the database. It allows the user to create, delete, update and access the data in the database.
We use a databse, when there is a huge amount of data, the security of data is important or when multiple users have to access to the data.

RDBMS:
-----
Is an advanced version of dbms. RDMS is a database that allows user to store related data in the form of mult tables, which are linked by establishing a relationship between different tables.

Tables:
-------
Rdbms uses tables to store the data in the form of rows and columns.

Rows:
-----
Records in the table.

Columns:
--------
Attributes/Fields in the table.

SQL:
----
Structured Query Language, used to request information from database. Using sql, user can perform actions like insertion, creation, deletion , updation etc.

SQL data types:
---------------
varchar2 - String datatypes in java
char - char type in java
date - date
timestamp - If we want timestamp
number - int
Long - double
clob - char upto 4gigabytes
Blob - binary upto 4gigabytes
raw - raw binary data
bfile - binary data that is stored in external files upto 4gb
rowid - 64 base number system for the unique address of a particular row in the table

Operators :
-----------
"+"  - add vales
"-"  - subtracts values
"%"  - modulus operations
"*"  - multiplies
"/"   - divide values

Comparison operators :
---------------------
= , != , < , > , <=, >=, 
!> -- Determine if the right operand is not more than left operand
!< -- Determine if the left operand is not more than right operand

Logical operators :
-------------------
OR , AND  and NOT

SQL Commands :
--------------
Create database -> create database db_name;
Rename database -> rename database old_name to new_name; or alter database old_name modify name = new_name;
Drop database -> drop database db_name;
Select all tables from database -> select * from db_name;
Select db -> use db_name

Create table -> create table table_nm(col_nm datatype(width),..., primary key())
Delete table records -> truncate table tbl_nm;
Delete entire table -> drop table table_name;
Rename table -> rename old_tbl_nm to new_tbl_nm;
Copy table -> select * into req_tbl from source_tbl;

Add coln in the table -> alter table tbl_nm add col_nm dt(width);
Modify field datatype -> alter table tbl_nm modify col_nm new_dt();
Delete coln -> alter table tbl_nm drop column col_nm;
Rename coln - alter table tbl_nm rename column old_col to new_col;

Sql constraints :
-----------------
Not null, 
Unique,
Primary key - It specifies a column or a set of columns that uniquely identify a row, it does not allow null values
Foreign Key - It is a column(s) that references a column(s) of a table
Check - It specifies a condition that must be satisfied by all the rows in a table

Insert commands :
-----------------
Inserting values into table -> insert into table_nm values(20,..);
Inserting value into specific coln -> insert into tbl_nm(col_nm) values(20);

Select commands:
----------------
Fetching a table -> Select * from table_nm;
Fetching unique values from table -> Select distinct coln_nm from tbl_nm;
Select count -> select count(col_nm) from tbl_nm where condition(col_nm >100); 
Select top -> select top no_records from tbl_nm where condition;
Select as -> select coln_nm as new_col_nm from tbl_nm;
Select in -> select col_nm from tbl_nm where coln_nm in(val1, val2) , Eg: select dep_nm from dept where dpt_id in(101,102);
select date -> select getdate();
select sum -> select sum col_nm from tbl_nm where condition(col>100);
select null -> select col_nm from tbl_nm where condition is null;

Clauses:
---------
Where -> Used to select only those records which satisfies specific condition
And -> Returns records if both the conditions are true
OR -> Returns records if any of the record is true
GroupBy -> groups rows that have the same values into summary rows according to cond, used functions like max, in, avg, sum, count
           select count(col_nm1) from tbl_nm where cond groupBy col_nm2;
OrderBy -> sort our selection either in asc or desc
           select col_nm1 from tbl_nm orderBy col_nm2 desc;
Having -> is used when we want to specify the condition for the selection of records
          select count(col_nm1), col_nm2 from tbl_nm grouby col_nm2 having count(col_nm3)>3; 
Update -> update tbl_nm set col_nm1 ="", col_nm2 ="" where col_nm3 =?;
Delete -> delete from tbl_nm where col_nm =?;
Union -> Used to combine result set of 2 or mone select statements
         select col_nm from tbl_nm1 union col_nm from tbl_nm2;
Intersect -> Return those values which common to both the datasets. This operator will only work if both the datasets being intersected have similar data types.
             select col_nm from tbl_nm1 intersect col_nm from tbl_nm2;
Except -> This operator selects those rows which are present in the SELECT statement and not in the second SELECT statement.
          select col_nm from tbl_nm1 except col_nm from tbl_nm2;

Joim commands:   Combines 2 or more tables based on related col btw them
--------------
Inner join -> Is used to combine the common records shared by the two datasets.
              select tbl_nm1.col_nm1, tbl_nm2.col_nm2 from tbl_nm1 inner join tbl_nm2 on tbl_nm1.col_nm1 = tbl_nm2.col_nm1;
Left join -> returns all records from the left table (table1), and the matching records (if any) from the right table (table2).
             SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;
Right join -> returns all records from the right table (table2), and the matching records (if any) from the left table (table1).
              SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
Full outer join -> used to combine all the records from both the tables when there are some common records between the tables.
                  SELECT dep_name FROM department  FULL OUTER JOIN employee ON department.dep_name = employee.emp_dep;
Self join ->  is used to combine a table with itself by creating a temporary table of itself and joining it with itself.
              SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID
              AND A.City = B.City
Cross join -> returns all records from both tables (table1 and table2).
              SELECT Customers.CustomerName, Orders.OrderID FROM Customers CROSS JOIN Orders WHERE Customers.CustomerID=Orders.CustomerID;
Sub query -> is a query nested within another query. These subqueries are placed in SQL clauses like WHERE, HAVING, WITH, FROM etc. The subqueries are executed 
             first and the output obtained after executing this query is used to execute the outer or the main query.
             SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);










































